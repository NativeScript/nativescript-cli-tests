Usage:
    $ tns emulate android [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns emulate android [--avd <Name>] [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns emulate android [--geny <GenyName>] [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]

Builds the specified project and runs it in a native Android emulator.

<Name> is the name of the Android virtual device that you want to use as listed by $ android list avd
    You can specify only one name at a time.
<GenyName> is the name of the Genymotion virtual device that you want to use as listed by $ genyshell -c "devices list"
    You can specify only one name at a time.

If you do not select an Android virtual device (AVD) with the --avd option or a Genymotion
virtual device with the --geny option, your app runs in the default AVD or a currently running emulator, if any.
To list the available AVDs, run $ android list avd
To list the available Genymotion devices, run $ genyshell -c "devices list"

To test your app on multiple Android virtual devices, run $ tns emulate android --avd <Name> or $ tns emulate android --geny <GenyName>
for each virtual device.

Prerequisites:
Before running your app in the Android emulator from the Android SDK, verify that your system meets the following requirements.
    * Verify that you are running the NativeScript CLI on a Windows, OS X or Linux system.
    * Verify that you have installed the Android SDK.
    * Verify that you have added the following Android SDK directories to the PATH environment variable:
        platform-tools
        tools
Before running your app in the Genymotion emulator, verify that your system meets the following requirements.
    * Verify that you have installed Genymotion.
    * On Windows and Linux systems, verify that you have added the Genymotion installation directory to the PATH environment variable.

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.
    --avd - Sets the Android virtual device on which you want to run your app.
            You can set only one device at a time.
            To list the available Android virtual devices, run $ android list avd
            You cannot use --avd and --geny simultaneously.
    --geny - Sets the Genymotion virtual device on which you want to run your app.
            You can set only one device at a time.
            To list the available Genymotion virtual devices, run $ genyshell -c "devices list"
            You cannot use --avd and --geny simultaneously.
    --timeout - Sets the number of seconds that the NativeScript CLI will wait for the virtual device to boot
            before quitting the operation and releasing the console.
            If not set, the default timeout is 120 seconds. To wait indefinitely, set 0.
    --release - If set, produces a release build. Otherwise, produces a debug build.
        When the --keyStore* options are specified, produces a signed release build.
    --keyStorePath - Specifies the file path to the keystore file (P12) which you want to use to code sign your APK.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStorePassword - Provides the password for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAlias - Provides the alias for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAliasPassword - Provides the password for the alias specified with --keStoreAliasPassword.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.